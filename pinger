#!/usr/bin/env python

# Copyright 2014 Mike Sampson

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
import yaml
import time
import gping
import requests
import argparse
import collections

counter = collections.Counter()

def parse_config():
    config = yaml.load(open(args.config).read())

    nodes = config['nodes']

    for node in nodes:
        node['up'] = True

    pushover = config['pushover']

    hipchat = config['hipchat']

    return (nodes, pushover, hipchat)


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('config', help='config file')

    return parser.parse_args()


def pushover_alert(msg, priority = 0):
    payload = {
	"user": pushover['user'],
	"token": pushover['token'],
	'priority': priority,
	'message': msg
    }

    if priority == 2:
        payload['retry'] = 300
        payload['expire'] = 3600

    r = requests.post('https://api.pushover.net/1/messages.json', data = payload)

    if r.status_code != requests.codes.ok:
	raise r.raise_for_status()


def hipchat_alert(msg, color):
    payload = {
        'format': 'json',
        'auth_token': hipchat['token'],
        'room_id': hipchat['room'],
        'from': hipchat['from'],
        'message': msg,
        'color': color
    }

    r = requests.post('https://api.hipchat.com/v1/rooms/message', data = payload)

    if r.status_code != requests.codes.ok:
	raise r.raise_for_status()


def lookup_node(address):
    for node in nodes:
	if node['ip'] == address:
	    return node
    return None


def ping_callback(ping):
    if ping['success']:
        counter[ping['dest_addr']] += 1


def loop(gp):
    counter.clear()
    for x in range(3):
        time.sleep(1)
        for node in nodes:
            gp.send(node['ip'], ping_callback)

    gp.join()

    for node in nodes:
        if counter[node['ip']] == 0 and node['up']:
            node['up'] = False
            msg =  '%s (%s) is down' % (node['name'], node['ip'])
            print(msg)
            pushover_alert(msg, priority = 2)
            hipchat_alert(msg, color = 'red')
        elif counter[node['ip']] > 0 and not node['up']:
            node['up'] = True
            msg =  '%s (%s) is up' % (node['name'], node['ip'])
            print(msg)
            pushover_alert(msg)
            hipchat_alert(msg, color = 'green')


    time.sleep(60)


def main():

    gp = gping.GPing()

    while True:
        loop(gp)

args = parse_args()

nodes, pushover, hipchat = parse_config()


if __name__ == '__main__':
    main()
